#include "TestAppPch.h"
#include "PlayerDataManagementTests.h"
#include "PlayerDataManagementOperations.h"

namespace PlayFab
{
namespace Test
{

AsyncOp<void> PlayerDataManagementTests::Initialize()
{
    return ServicesTestClass::Initialize();
}

AsyncOp<void> PlayerDataManagementTests::Uninitialize()
{
    return ServicesTestClass::Uninitialize();
}

void PlayerDataManagementTests::TestClientGetUserData(TestContext& tc)
{
    tc.Skip();
}

void PlayerDataManagementTests::TestClientGetUserPublisherData(TestContext& tc)
{
    tc.Skip();
}

void PlayerDataManagementTests::TestClientGetUserPublisherReadOnlyData(TestContext& tc)
{
    tc.Skip();
}

void PlayerDataManagementTests::TestClientGetUserReadOnlyData(TestContext& tc)
{
    tc.Skip();
}

void PlayerDataManagementTests::TestClientUpdateUserData(TestContext& tc)
{
    tc.Skip();
}

void PlayerDataManagementTests::TestClientUpdateUserPublisherData(TestContext& tc)
{
    tc.Skip();
}

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerGetUserData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerGetUserInternalData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerGetUserPublisherData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerGetUserPublisherInternalData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerGetUserPublisherReadOnlyData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerGetUserReadOnlyData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerUpdateUserData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerUpdateUserInternalData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerUpdateUserPublisherData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerUpdateUserPublisherInternalData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerUpdateUserPublisherReadOnlyData(TestContext& tc)
{
    tc.Skip();
}
#endif

#if HC_PLATFORM == HC_PLATFORM_WIN32 || HC_PLATFORM == HC_PLATFORM_LINUX || HC_PLATFORM == HC_PLATFORM_MAC
void PlayerDataManagementTests::TestServerUpdateUserReadOnlyData(TestContext& tc)
{
    tc.Skip();
}
#endif


}
}
