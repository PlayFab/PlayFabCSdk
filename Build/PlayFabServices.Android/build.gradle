apply plugin: "com.android.library"

android {
    compileSdk 34
    ndkVersion "25.1.8937393"

    defaultConfig {
        targetSdkVersion 34
        minSdkVersion 21

        externalNativeBuild {
            cmake {
                // externalNativeBuild normally skips static
                // lib targets. This forces it to build.
                targets "PlayFabServices.Android"
            }
        }
    }

    externalNativeBuild {
        cmake {
            version "3.18.1"
            path "CMakeLists.txt"
            buildStagingDirectory "${project.buildDir.getParentFile().getAbsolutePath()}/.cxx/${project.name}"
        }
    }

    flavorDimensions "ABI"

    productFlavors {
        full {
            dimension "ABI"
            externalNativeBuild {
                cmake {
                    abiFilters "arm64-v8a", "x86_64"
                }
            }
        }
        arm8 {
            dimension "ABI"
            externalNativeBuild {
                cmake {
                    abiFilters "arm64-v8a"
                }
            }
        }
        x86_64 {
            dimension "ABI"
            externalNativeBuild {
                cmake {
                    abiFilters "x86_64"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility=JavaVersion.VERSION_1_8
        targetCompatibility=JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt")
        }
    }

    task archivePlayFabSDKReleasePackage(type: Zip) {
        println("Generating PlayFab.C SDK zip archive...")

        // Include the PlayFabServices `.so`
        from('../../Out/Android/PlayFabServices.Android/intermediates/cmake/fullRelease/obj') {
            include '*/libPlayFabServices.Android.so'
            into 'bin'
        }

        // Include the PlayFabCore `.so`
        from('../../Out/Android/PlayFabCore.Android/intermediates/cmake/fullRelease/obj') {
            include '*/libPlayFabCore.Android.so'
            into 'bin'
        }

        // Include the PlayFabServices `.aar`
        from('../../Out/Android/PlayFabServices.Android/outputs/aar') {
            include 'PlayFabServices.Android-full-release.aar'
            into 'aar'
        }

        // Include the libHttpClient.Android `.aar`
        from('../../../libHttpClient/Binaries/Android/libHttpClient.Android/outputs/aar') {
            include 'libHttpClient.Android-release.aar'
            into 'aar'
        }

        // Include the PlayFabServices header files
        from('../../Source/PlayFabServices/Include/Generated/playfab/services') {
            include '*.h'
            include 'cpp/**'
            into 'Include/playfab/services'
        }

        // Include the PlayFabCore header files
        from('../../Source/PlayFabCore/Include/Generated/playfab/core') {
            include '*.h'
            include 'cpp/**'
            into 'Include/playfab/core'
        }
        from('../../Source/PlayFabCore/Include/playfab/core') {
            include '*.h'
            include 'cpp/**'
            into 'Include/playfab/core'
        }
        from('../../Source/PlayFabCore/Include/playfab/httpClient') {
            include '*.h'
            into 'Include/playfab/httpClient'
        }

        // Include the libHttpClient header files
        from('../../../libHttpClient/Include') {
            include '*.h'
            include 'httpClient/**'
            include 'json_cpp/**'
            into 'Include/libHttpClient'
        }

        // TODO: Update this archive name to standardize naming schemes
        archiveName 'PlayFabServicesAndroidSDK.zip'
        destinationDir(file('../../AndroidArtifact'))
    }
}

// Put all the Gradle build files under the /Out directory
def binariesDir = project.file("../../Out/Android/${project.name}").getAbsolutePath()
project.buildDir(new File(binariesDir))